[{"name":"app.R","content":"library(shiny)\nlibrary(bslib)\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(DT)\n\n# Create a custom theme\nmy_theme <- bs_theme(\n  version = 5,\n  bootswatch = \"superhero\",\n  primary = \"#4B0082\",  # Deep purple\n  \"card-bg\" = \"#1E2A3B\",\n  \"body-bg\" = \"#0F1723\",\n  \"body-color\" = \"#E0E0E0\"\n) |>\n  bs_add_rules(sass::sass_file(\"custom.scss\"))\n\nui <- page_fluid(\n  theme = my_theme,\n  card(\n    class = \"shadow-lg\",\n    card_header(\n      h2(\"Regression Diagnostics Tool\", class = \"text-center\")\n    ),\n    layout_sidebar(\n      sidebar = sidebar(\n        fileInput(\"file\", \"Upload CSV File\"),\n        selectInput(\"x_var\", \"Select X Variable\", choices = NULL),\n        selectInput(\"y_var\", \"Select Y Variable\", choices = NULL),\n        numericInput(\"cooks_multiplier\", \"Cook's Distance Threshold Multiplier\", \n                     value = 4, min = 0, step = 0.1),\n        numericInput(\"leverage_multiplier\", \"Leverage Threshold Multiplier\", \n                     value = 2, min = 0, step = 0.1),\n        actionButton(\"reset\", \"Reset Data\", class = \"btn-warning w-100\")\n      ),\n      card(\n        class = \"shadow\",\n        card_header(\n          h3(\"Regression Analysis\", class = \"text-center\")\n        ),\n        navset_tab(\n          nav_panel(\n            \"Diagnostic Plots\",\n            plotOutput(\"regPlot\", height = \"400px\"),\n            br(),\n            plotOutput(\"diagnosticPlots\", height = \"400px\"),\n            br(), br(),\n            h3(\"Influential Points\", class = \"text-center\"),\n            DTOutput(\"influentialPoints\")\n          ),\n          nav_panel(\n            \"R Code\",\n            verbatimTextOutput(\"rcode\")\n          )\n        )\n      )\n    )\n  )\n)\n\nserver <- function(input, output, session) {\n  # [Rest of the server code remains exactly the same]\n  rv <- reactiveValues(\n    data = NULL,\n    removed_points = NULL\n  )\n  \n  observeEvent(input$file, {\n    rv$data <- read.csv(input$file$datapath)\n    rv$removed_points <- NULL\n    updateSelectInput(session, \"x_var\", choices = names(rv$data))\n    updateSelectInput(session, \"y_var\", choices = names(rv$data))\n  })\n  \n  observeEvent(input$reset, {\n    if (!is.null(rv$data)) {\n      rv$removed_points <- NULL\n    }\n  })\n  \n  regression_data <- reactive({\n    req(rv$data, input$x_var, input$y_var)\n    \n    current_data <- rv$data\n    if (!is.null(rv$removed_points)) {\n      current_data <- current_data[-rv$removed_points,]\n    }\n    \n    model <- lm(as.formula(paste(input$y_var, \"~\", input$x_var)), data = current_data)\n    \n    n <- nrow(current_data)\n    p <- 2\n    \n    cooks_d <- cooks.distance(model)\n    leverage <- hatvalues(model)\n    studentized_residuals <- rstudent(model)\n    \n    cooks_threshold <- input$cooks_multiplier/n\n    leverage_threshold <- input$leverage_multiplier * p/n\n    \n    diagnostic_df <- data.frame(\n      row = 1:n,\n      x = current_data[[input$x_var]],\n      y = current_data[[input$y_var]],\n      cooks_d = cooks_d,\n      leverage = leverage,\n      studentized_residuals = studentized_residuals,\n      influential = cooks_d > cooks_threshold | leverage > leverage_threshold\n    )\n    \n    list(\n      model = model,\n      diagnostic_df = diagnostic_df,\n      cooks_threshold = cooks_threshold,\n      leverage_threshold = leverage_threshold\n    )\n  })\n  \n  output$regPlot <- renderPlot({\n    req(regression_data())\n    \n    reg_data <- regression_data()\n    \n    ggplot(reg_data$diagnostic_df, aes(x = x, y = y)) +\n      geom_point(aes(color = influential), size = 3, alpha = 0.7) +\n      geom_smooth(method = \"lm\", se = TRUE, color = \"#00BCD4\") +\n      labs(x = input$x_var, y = input$y_var, \n           title = \"Regression Plot with Influential Points Highlighted\") +\n      scale_color_manual(values = c(\"FALSE\" = \"#7B8FA1\", \"TRUE\" = \"#FF5252\")) +\n      theme_minimal() +\n      theme(\n        plot.background = element_rect(fill = \"#1E2A3B\", color = NA),\n        panel.background = element_rect(fill = \"#1E2A3B\", color = NA),\n        text = element_text(color = \"#E0E0E0\"),\n        axis.text = element_text(color = \"#E0E0E0\"),\n        title = element_text(color = \"#E0E0E0\"),\n        legend.background = element_rect(fill = \"#1E2A3B\"),\n        legend.text = element_text(color = \"#E0E0E0\")\n      )\n  })\n  \n  output$diagnosticPlots <- renderPlot({\n    req(regression_data())\n    \n    reg_data <- regression_data()\n    \n    par(mfrow = c(1, 2), bg = \"#1E2A3B\", col.axis = \"#E0E0E0\", col.lab = \"#E0E0E0\", col.main = \"#E0E0E0\")\n    \n    plot(reg_data$diagnostic_df$cooks_d, type = \"h\",\n         main = \"Cook's Distance\",\n         ylab = \"Cook's Distance\",\n         xlab = \"Observation Number\",\n         col = \"#00BCD4\")\n    abline(h = reg_data$cooks_threshold, col = \"#FF5252\", lty = 2)\n    \n    plot(reg_data$diagnostic_df$leverage, type = \"h\",\n         main = \"Leverage\",\n         ylab = \"Leverage\",\n         xlab = \"Observation Number\",\n         col = \"#00BCD4\")\n    abline(h = reg_data$leverage_threshold, col = \"#FF5252\", lty = 2)\n  })\n  \n  output$influentialPoints <- renderDT({\n    req(regression_data())\n    \n    reg_data <- regression_data()\n    influential <- reg_data$diagnostic_df[reg_data$diagnostic_df$influential, ]\n    \n    if(nrow(influential) > 0) {\n      influential |>\n        select(row, x, y, cooks_d, leverage, studentized_residuals) |>\n        round(4)\n    }\n  }, options = list(\n    pageLength = 5,\n    dom = 'Bfrtip',\n    initComplete = JS(\n      \"function(settings, json) {\",\n      \"$(this.api().table().container()).css({'background-color': '#1E2A3B', 'color': '#E0E0E0'});\",\n      \"}\"\n    )\n  ))\n  \n  output$rcode <- renderText({\n    req(input$x_var, input$y_var)\n    \n    paste0(\n      \"# Load required packages\\n\",\n      \"library(dplyr)\\n\\n\",\n      \"# Fit linear regression model\\n\",\n      sprintf(\"model <- lm(%s ~ %s, data = your_data)\\n\\n\", input$y_var, input$x_var),\n      \"# Calculate diagnostic measures\\n\",\n      \"n <- nrow(your_data)\\n\",\n      \"p <- 2  # number of parameters in simple linear regression\\n\\n\",\n      \"# Calculate thresholds\\n\",\n      sprintf(\"cooks_threshold <- %s/n\\n\", input$cooks_multiplier),\n      sprintf(\"leverage_threshold <- %s * p/n\\n\\n\", input$leverage_multiplier),\n      \"# Calculate diagnostic statistics\\n\",\n      \"diagnostic_df <- data.frame(\\n\",\n      \"  cooks_d = cooks.distance(model),\\n\",\n      \"  leverage = hatvalues(model),\\n\",\n      \"  studentized_residuals = rstudent(model)\\n\",\n      \")\\n\\n\",\n      \"# Identify influential points\\n\",\n      \"influential <- diagnostic_df$cooks_d > cooks_threshold |\\n\",\n      \"  diagnostic_df$leverage > leverage_threshold\\n\\n\",\n      \"# Get indices of influential points\\n\",\n      \"influential_points <- which(influential)\\n\"\n    )\n  })\n}\n\nshinyApp(ui, server)","type":"text"},{"name":"custom.scss","content":"/* Custom SCSS rules */\n.card {\n  border: 1px solid rgba(255, 255, 255, 0.1);\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n}\n\n.nav-tabs .nav-link {\n  color: #E0E0E0;\n  &:hover {\n    color: #00BCD4;\n  }\n  &.active {\n    color: #00BCD4;\n    background-color: #1E2A3B;\n    border-color: #00BCD4;\n  }\n}\n\npre {\n  background-color: #2C3E50;\n  color: #E0E0E0;\n  padding: 1rem;\n  border-radius: 0.375rem;\n}\n\n.btn-warning {\n  background-color: #FF9800;\n  border-color: #FF9800;\n  &:hover {\n    background-color: #F57C00;\n    border-color: #F57C00;\n  }\n}","type":"text"}]
